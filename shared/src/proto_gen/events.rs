// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BaseEvent {
    #[prost(message, optional, tag = "1")]
    pub ts: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "2")]
    pub sensor_guid: ::prost::alloc::string::String,
    #[prost(oneof = "base_event::Payload", tags = "10, 11, 12, 13, 14, 15, 16")]
    pub payload: ::core::option::Option<base_event::Payload>,
}
/// Nested message and enum types in `BaseEvent`.
pub mod base_event {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "10")]
        FileEvent(super::FileEvent),
        #[prost(message, tag = "11")]
        NetworkEvent(super::NetworkEvent),
        #[prost(message, tag = "12")]
        ProcessEvent(super::ProcessEvent),
        #[prost(message, tag = "13")]
        ScanResult(super::ScanResult),
        #[prost(message, tag = "14")]
        EtwEvent(super::EtwEvent),
        #[prost(message, tag = "15")]
        ImageLoadEvent(super::ImageLoadEvent),
        #[prost(message, tag = "16")]
        ObjectOpEvent(super::ObjectOpEvent),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileEvent {
    #[prost(enumeration = "file_event::Operation", tag = "1")]
    pub op: i32,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub new_path: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub pid: u32,
    #[prost(string, tag = "5")]
    pub exe_path: ::prost::alloc::string::String,
    #[prost(uint64, tag = "6")]
    pub size: u64,
    #[prost(bytes = "vec", tag = "7")]
    pub sha256: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "8")]
    pub success: bool,
}
/// Nested message and enum types in `FileEvent`.
pub mod file_event {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Operation {
        Create = 0,
        Write = 1,
        Delete = 2,
        Rename = 3,
    }
    impl Operation {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Create => "CREATE",
                Self::Write => "WRITE",
                Self::Delete => "DELETE",
                Self::Rename => "RENAME",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CREATE" => Some(Self::Create),
                "WRITE" => Some(Self::Write),
                "DELETE" => Some(Self::Delete),
                "RENAME" => Some(Self::Rename),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetworkEvent {
    #[prost(enumeration = "network_event::Direction", tag = "1")]
    pub direction: i32,
    #[prost(string, tag = "2")]
    pub proto: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub src_ip: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub src_port: u32,
    #[prost(string, tag = "5")]
    pub dst_ip: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub dst_port: u32,
    #[prost(uint32, tag = "7")]
    pub pid: u32,
    #[prost(string, tag = "8")]
    pub exe_path: ::prost::alloc::string::String,
    #[prost(uint64, tag = "9")]
    pub bytes: u64,
    #[prost(bool, tag = "10")]
    pub blocked: bool,
}
/// Nested message and enum types in `NetworkEvent`.
pub mod network_event {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Direction {
        Inbound = 0,
        Outbound = 1,
    }
    impl Direction {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Inbound => "INBOUND",
                Self::Outbound => "OUTBOUND",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "INBOUND" => Some(Self::Inbound),
                "OUTBOUND" => Some(Self::Outbound),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessEvent {
    #[prost(uint32, tag = "1")]
    pub pid: u32,
    #[prost(uint32, tag = "2")]
    pub ppid: u32,
    #[prost(string, tag = "3")]
    pub image_path: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub cmdline: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScanResult {
    #[prost(string, tag = "1")]
    pub rule_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file_path: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub matches: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "scan_result::Severity", tag = "4")]
    pub severity: i32,
}
/// Nested message and enum types in `ScanResult`.
pub mod scan_result {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Severity {
        Low = 0,
        Medium = 1,
        High = 2,
        Critical = 3,
    }
    impl Severity {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Low => "LOW",
                Self::Medium => "MEDIUM",
                Self::High => "HIGH",
                Self::Critical => "CRITICAL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "LOW" => Some(Self::Low),
                "MEDIUM" => Some(Self::Medium),
                "HIGH" => Some(Self::High),
                "CRITICAL" => Some(Self::Critical),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EtwEvent {
    #[prost(string, tag = "1")]
    pub provider_guid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub event_id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub pid: u32,
    #[prost(uint32, tag = "5")]
    pub tid: u32,
    #[prost(string, tag = "6")]
    pub json_payload: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageLoadEvent {
    #[prost(uint32, tag = "1")]
    pub pid: u32,
    #[prost(string, tag = "2")]
    pub image_path: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub image_base: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectOpEvent {
    #[prost(uint32, tag = "1")]
    pub pid: u32,
    #[prost(string, tag = "2")]
    pub target: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub operation: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub success: bool,
}
